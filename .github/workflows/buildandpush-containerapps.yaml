on: [push]
name: Build&Push images to Azure Container Apps (azure-container-apps)

env:
  DEPLOYMENT_MANIFEST_PATH: |
      ./makefile

jobs:
  buildEnvironment:
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v3
        - name: 'Login via Azure CLI'
          uses: azure/login@v1
          with:
            creds: ${{ secrets.ACA_AZURE_CREDENTIALS }}
        - name: Check if resource group exists
          id: check_resource_group
          run: |
            echo exists=$(az group exists --name ${{ vars.ACA_RESOURCE_GROUP }})
        - name: Create resource group
          if: steps.check_resource_group.outputs.exists != 'true'
          run: |
            az group create \
              --name ${{ vars.ACA_RESOURCE_GROUP }} \
              --location ${{ vars.ACA_LOCATION }} 
        - name: Check if container registry exists
          id: check_container_registry
          run: |
            echo exists=$(az acr check-name --name ${{ vars.ACA_CONTAINER_REGISTRY }} --query "nameAvailable")
        - name: Create container registry
          if: steps.check_container_registry.outputs.exists == 'true'
          run: |
            az acr create \
              --name ${{ vars.ACA_CONTAINER_REGISTRY }} \
              --resource-group ${{ vars.ACA_RESOURCE_GROUP }} \
              --sku Basic \
              --admin-enabled true
        - name: Check if container app environment exists
          id: check_container_app_environment
          run: |
            echo exists=$(az containerapp environment show --name ${{ vars.ACA_CONTAINER_APP_ENVIRONMENT }} --resource-group ${{ vars.ACA_RESOURCE_GROUP }} --query "name")
        - name: Create container app environment
          run: |
          if: steps.check_container_app_environment.outputs.exists != 'true'
            az containerapp env create \
              --name ${{ vars.ACA_CONTAINER_APP_ENVIRONMENT }} \
              --resource-group ${{ vars.ACA_RESOURCE_GROUP }} \
              --location ${{ vars.ACA_LOCATION }}              
              
  buildImage:
    needs: buildEnvironment
    permissions:
        contents: read
        id-token: write
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v3
        - name: 'Login via Azure CLI'
          uses: azure/login@v1
          with:
            creds: ${{ secrets.ACA_AZURE_CREDENTIALS }}
        - name: Build and push checkout image to ACR (${{ vars.ACA_CONTAINER_REGISTRY }})
          run: az acr build --image checkout:latest --registry ${{ vars.ACA_CONTAINER_REGISTRY }} -g ${{ vars.ACA_RESOURCE_GROUP }} -f ./checkout/Dockerfile ./checkout/
        - name: Build and push order-processor image to ACR (${{ vars.ACA_CONTAINER_REGISTRY }})
          run: az acr build --image order-processor:latest --registry ${{ vars.ACA_CONTAINER_REGISTRY }} -g ${{ vars.ACA_RESOURCE_GROUP }} -f ./order-processor/Dockerfile ./order-processor/

  createScaleableContainerApps:
    needs: buildImage
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v3
        - name: 'Login via Azure CLI'
          uses: azure/login@v1
          with:
            creds: ${{ secrets.ACA_AZURE_CREDENTIALS }}
            
        - name: Check if checkout container app exists
          id: check_checkout_container_app
          run: |
            az containerapp show --name checkout --resource-group ${{ vars.ACA_RESOURCE_GROUP }}
            echo "::set-output name=exists::true"
          continue-on-error: true
        - name: Create checkout container app
          if: steps.check_checkout_container_app.outputs.exists != 'true'
          run: |
            az containerapp create \
              --name checkout \
              --resource-group ${{ vars.ACA_RESOURCE_GROUP }} \
              --environment ${{ vars.ACA_CONTAINER_APP_ENVIRONMENT }} \
              --min-replicas 1 \
              --max-replicas 3 \
              --enable-dapr \
              --dapr-app-id checkout \
              --dapr-app-protocol grpc \
              --target-port 80 \
              --ingress external

        - name: Check if checkout container app exists
          id: check_order-processor_container_app
          run: |
            az containerapp show --name order-processor --resource-group ${{ vars.ACA_RESOURCE_GROUP }}
            echo "::set-output name=exists::true"
          continue-on-error: true
        - name: Create order-processor container app
          if: steps.check_order-processor_container_app.outputs.exists != 'true'
          run: |
            az containerapp create \
              --name order-processor \
              --resource-group ${{ vars.ACA_RESOURCE_GROUP }} \
              --environment ${{ vars.ACA_CONTAINER_APP_ENVIRONMENT }} \
              --min-replicas 0 \
              --max-replicas 3 \
              --scale-rule-name order-processor-service-bus-queue-length \
              --scale-rule-type azure-servicebus \
              --scale-rule-metadata \
                "queueName=orders" \
                "namespace=sb-orderpubsub" \
                "messageCount=5" \
              --enable-dapr \
              --dapr-app-id order-processor \
              --dapr-app-protocol grpc \
              --secrets service-bus-connection-string=${{ secrets.ACA_SERVICE_BUS_CONNECTION_STRING }} \
              --scale-rule-auth connection=service-bus-connection-string \
              --target-port 80 \
              --ingress internal


  deployContainerApps:
    needs: createScaleableContainerApps
    runs-on: ubuntu-latest
    strategy: 
      matrix:
        app: [checkout, order-processor]
    steps:
        - uses: actions/checkout@v3
        - name: 'Login via Azure CLI'
          uses: azure/login@v1
          with:
            creds: ${{ secrets.ACA_AZURE_CREDENTIALS }}
        - name: Deploy container app
          run: |
            az containerapp up \
              --name ${{ matrix.app }} \
              --resource-group ${{ vars.ACA_RESOURCE_GROUP }} \
              --location ${{ vars.ACA_LOCATION }} \
              --environment ${{vars.ACA_CONTAINER_APP_ENVIRONMENT}} \
              --image ${{ vars.ACA_REGISTRY_LOGIN_SERVER }}/${{ matrix.app }}:latest \
              --query properties.configuration.ingress.fqdn \
              --registry-username ${{ secrets.ACA_REGISTRY_USERNAME }} \
              --registry-password ${{ secrets.ACA_REGISTRY_PASSWORD }} \
              --env-vars 'PORT=80'              
